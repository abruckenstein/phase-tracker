{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createCards","cardObjects","1","title","description","2","3","4","5","6","7","Object","keys","map","key","Card","className","text","state","counter","Body","Text","style","margin","increment","setState","console","log","maxHeight","this","Button","variant","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAuEeA,G,wDA/Db,WAAYC,GACX,IAAD,8BACE,cAAMA,IA0BRC,YAAc,WAGZ,IAAIC,EACJ,CACEC,EAAG,CAAEC,MAAO,kBAAmBC,YAAa,eAC5CC,EAAG,CAAEF,MAAO,eAAgBC,YAAa,6FACzCE,EAAG,CAAEH,MAAO,kBAAmBC,YAAa,qCAC5CG,EAAG,CAAEJ,MAAO,iBAAkBC,YAAa,qCAC3CI,EAAG,CAAEL,MAAO,kBAAmBC,YAAa,qCAC5CK,EAAG,CAAEN,MAAO,eAAgBC,YAAa,0GACzCM,EAAG,CAAEP,MAAO,eAAgBC,YAAa,sCAa3C,OAVYO,OAAOC,KAAKX,GAAaY,KAAI,SAACC,GACzC,IAAD,EACE,OAAO,kBAACC,EAAA,GAAD,GAAMC,UAAU,6BAA6BC,KAAK,QAAlD,0BAAmE,QAAnE,mBAA8E,EAAKC,MAAMC,SAAWL,EAAM,GAAK,aAA/G,GACL,kBAACC,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,KAAN,CAAWL,UAAU,aAAaM,MAAO,CAAEC,OAAQ,IAAMtB,EAAYa,GAAKX,OAC1E,kBAACY,EAAA,EAAKM,KAAN,CAAWL,UAAU,YAAYM,MAAO,CAAEC,OAAQ,IAAMtB,EAAYa,GAAKV,mBA9CjF,EAsDAoB,UAAY,WAEV,EAAKC,SAAS,CAAEN,QAAS,EAAKD,MAAMC,QAAU,EAAI,EAAKD,MAAMC,QAAU,EAAI,IAC3EO,QAAQC,IAAI,EAAKT,MAAMC,UAvDvB,EAAKD,MAAQ,CACXC,QAAS,GAHb,E,qDASE,OACE,6BACE,yBAAKH,UAAU,MAAMM,MAAO,CAAEM,UAAW,SACvC,4BAAQZ,UAAU,cAChB,6BACE,yBAAKA,UAAU,OACZa,KAAK7B,cACN,kBAAC8B,EAAA,EAAD,CAAQd,UAAU,MAAMe,QAAQ,UAAUC,QAASH,KAAKL,WAAxD,iB,GApBES,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.cbb61cd0.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Button, CardDeck } from 'react-bootstrap'\nimport './App.css';\n\n\nclass App extends React.Component\n{\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n  }\n\n  render()\n  {\n    return (\n      <div>\n        <div className=\"App\" style={{ maxHeight: '95vh' }}>\n          <header className=\"App-header\" >\n            <div>\n              <div className='col'>\n                {this.createCards()}\n                <Button className='row' variant=\"primary\" onClick={this.increment}>\n                  Next\n                </Button>\n              </div>\n            </div>\n          </header>\n        </div>\n      </div>\n    );\n  }\n\n  createCards = () =>\n  {\n\n    let cardObjects =\n    {\n      1: { title: \"Beginning Phase\", description: \"Untap, Draw\" },\n      2: { title: \"Main Phase 1\", description: \"Play a single land now or in next main. You may cast any cards and activate any abilities\" },\n      3: { title: \"Declare Attacks\", description: \"Play instants, activate abilities\" },\n      4: { title: \"Declare Blocks\", description: \"Play instants, activate abilities\" },\n      5: { title: \"Damage Resolves\", description: \"Play instants, activate abilities\" },\n      6: { title: \"Main Phase 2\", description: \"Play a single land now, if not yet played this turn. You may cast any cards and activate any abilities\" },\n      7: { title: \"Ending Phase\", description: \"Play instants, activate abilities\" },\n    }\n\n    let cards = Object.keys(cardObjects).map((key) =>\n    {\n      return <Card className='row align-self-center Card' text=\"dark\" className=\"mb-2\" bg={this.state.counter == key ? \"\" : \"secondary\"}>\n        <Card.Body>\n          <Card.Text className='Card-title' style={{ margin: 0 }}>{cardObjects[key].title}</Card.Text>\n          <Card.Text className='Card-text' style={{ margin: 0 }}>{cardObjects[key].description}</Card.Text>\n        </Card.Body>\n      </Card>\n    })\n\n    return cards;\n  }\n\n  increment = () =>\n  {\n    this.setState({ counter: this.state.counter < 7 ? this.state.counter + 1 : 1 })\n    console.log(this.state.counter);\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}